name: Mirror 3proxy images to GHCR

on:
  push:
    branches: [ master ]
  workflow_dispatch:

env:
  SOURCE_REPO: tarampampam/3proxy
  TARGET_REPO: ghcr.io/yabloky/3proxy
  KEEP: 2

jobs:
  mirror:
    runs-on: ubuntu-latest
    permissions:
      packages: write

    steps:
      - name: Install jq
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq gh
      - name: Get last 2 real numeric tags from Docker Hub
        id: tags
        run: |
          KEEP=${{ env.KEEP }}
          VERSIONS=$(curl -fsSL "https://hub.docker.com/v2/repositories/${SOURCE_REPO}/tags/?page_size=100" \
            | jq --argjson k "$KEEP" -r '[ .results[].name
                        | select(test("^[0-9]+\\.[0-9]+(\\.[0-9]+)?$")) ]
                      | map( if test("^[0-9]+\\.[0-9]+$") then . + ".0" else . end )
                      | unique
                      | sort_by([ split(".")[] | tonumber ])
                      | reverse
                      | .[:$k][]')
          echo "versions<<EOF" >> "$GITHUB_OUTPUT"
          echo "$VERSIONS" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
          echo "Found versions:"
          echo "$VERSIONS"
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Mirror last 2 versions
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          TARGET="${{ env.TARGET_REPO }}"
          SOURCE="${{ env.SOURCE_REPO }}"
          VERSIONS="${{ steps.tags.outputs.versions }}"
          echo "Mirroring versions from upstream:"
          echo "$VERSIONS"
          # 1. Синхронизация 2 последних версий
          while read -r VER; do
            [ -z "$VER" ] && continue
            echo "→ Sync ${VER}"
            docker pull "${SOURCE}:${VER}"
            docker tag  "${SOURCE}:${VER}" "${TARGET}:${VER}"
            docker push "${TARGET}:${VER}"
          done <<< "$VERSIONS"
          # 2. Удаляем с GHCR всё, чего нет в апстриме
          ALL_IDS=$(gh api -H "Accept: application/vnd.github+json" /users/${{ github.actor }}/packages/container/3proxy/versions | jq -r '.[].id')
          for ID in $ALL_IDS; do
            TAGS=$(gh api -H "Accept: application/vnd.github+json" /users/${{ github.actor }}/packages/container/3proxy/versions/$ID | jq -r '.metadata.container.tags[]?' || true)
            MATCH=false
            for VER in $VERSIONS; do
              echo "$TAGS" | grep -qx "$VER" && MATCH=true
            done
            if [ "$MATCH" = false ]; then
              echo "Deleting old GHCR package version id=$ID (tags: $TAGS)"
              gh api --method DELETE -H "Accept: application/vnd.github+json" /users/${{ github.actor }}/packages/container/3proxy/versions/$ID
            fi
          done
          # 3. Перетегируем latest
          LATEST=$(echo "$VERSIONS" | head -n1)
          echo "→ Updating latest -> ${LATEST}"
          docker pull "${SOURCE}:${LATEST}"
          docker tag  "${SOURCE}:${LATEST}" "${TARGET}:latest"
          docker push "${TARGET}:latest"
